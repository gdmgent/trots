// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == 'string',
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. ';
  }
}

/// Font-size rem manager
/// @access public
/// @param {String} $size - Font Size in px
/// @requires $size
@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}


/// Keyframe Generator
/// @access public
/// @param {String} $animation-name - Animation in name
/// @requires $animation-name
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}


/// Animation Generator
/// @access public
/// @param {String} $str - Animation string
/// @example include animation('slide-down 5s 3')
/// @requires $str
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

@mixin animation-delay($str) {
  -webkit-animation-delay: #{$str};
  -moz-animation-delay: #{$str};
  -ms-animation-delay: #{$str};
  -o-animation-delay: #{$str};
  animation-delay: #{$str};
}

@mixin fill-mode ($fillmode) {
  -o-animation-fill-mode: $fillmode;
  -moz-animation-fill-mode: $fillmode;
  -webkit-animation-fill-mode: $fillmode;
  animation-fill-mode: $fillmode;
}
/// Transition Generator
/// @access public
/// @param {String} $args - Transition arguments string
/// @requires $args
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/// Opacity Generator
/// @access public
/// @param {Int} $opacity - Opacity value int
/// @requires $opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}


// generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale...) {
  @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}
@mixin translate3d ($x, $y, $z) {
  @include transform(translate3d($x, $y, $z));
}
// skew
@mixin skew ($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
  moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}
//transform style
@mixin transform-style ($style) {
  -moz-transform-style: $style;
  -ms-transform-style: $style;
  -o-transform-style: $style;
  -webkit-transform-style: $style;
  transform-style: $style;
}
@mixin backface-visibility ($visibility) {
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
  backface-visibility: $visibility;
}
